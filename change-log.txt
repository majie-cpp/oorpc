# milestone 5 baseline:

1. Add exception handling. 
* ServiceException defined.
* framework code updated.
* Client test code updated.
* Server test code update.

2. test passed.

# milestone 6 baseline

1. Fixed mem leak in Proxy class 
constructor created ServiceDefinition<..> is not destroied in destructor.

2. Arg class revised.
Change Arg, is not derived from IPersistence.
Handle serialization itself by defining standalone template based operator "<<" and ">>"

3. Some other minor changes to apply oorpc into MFC test application, in which CSocket class is used as underlying transportation in server side.

4. Added MFC sample.

# milestone 7

1. Complete MFC sample

2. Revised SocketTransportImpl to work properly together with MFC application in asynchronous mode:
  * Add getSocketHandle() method to expose SOCKET handle
  * move listening code to bind(..) method.
  * While working with MFC socket, the socket recv is sometimes hung due to more than 1 recv(..) calling in CSocket::OnReceive(..) handler, which might result in FD_READ event missing. Refer to socket common issue on MSDN: Q185728, Q245434.
To work around this, the MFC socket server use WSAAsyncSelect(..) rather than CSocket to receive asynchronous socket event.

# milestone 8
1. Revised testclient.cpp
2. Revise [milestone 7, issue 2]:
WSAAsyncSelect(..) still does not work as expected in case where 2 recv(..) calling are made againest 1 FD_READ message. 
Implemented AsyncSelector to fully resolve this issue: launch a underlying thread to monitor the specified socket, post WND message to the host window whenever any socket event occurs.